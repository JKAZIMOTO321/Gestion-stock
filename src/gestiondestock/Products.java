/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package gestiondestock;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import static java.time.Clock.system;
import javax.swing.JOptionPane;

/**
 *
 * @author Ir Josue KAZIMOTO
 */
public class Products extends javax.swing.JPanel {

    /**
     * Creates new form Produits
     */
    String productName, productID;
    String productQuantity, productPrice;
    double productQuantityInt,productPriceInt,totalPrice;
    public Products() {
        initComponents();
    }
    public double verifyIsInt(String valueStr, String element){
        double valeur;
        valeur = 0;
        try{
            valeur = Double.parseDouble(valueStr);
        }catch(NumberFormatException e){
            JOptionPane.showMessageDialog(this,
            "Pour "+element+" Tu dois ecrire des chiffres",
            "Erreur",
            JOptionPane.ERROR_MESSAGE);
        }
        return valeur;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtProduitName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        txtPrixU = new javax.swing.JTextField();
        txtQuantite = new javax.swing.JTextField();

        setMaximumSize(new java.awt.Dimension(700, 400));
        setMinimumSize(new java.awt.Dimension(700, 400));
        setPreferredSize(new java.awt.Dimension(650, 300));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Produits");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel2.setText("Quantité :");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel3.setText("Nom du produit :");

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel4.setText("Prix Unitaire(En CDF) :");

        jButton1.setBackground(new java.awt.Color(0, 102, 255));
        jButton1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton1.setText("Ajouter le produit");
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 581, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(12, 12, 12)
                                    .addComponent(txtProduitName))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(txtQuantite))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtPrixU)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(204, 204, 204)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(119, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtProduitName, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                    .addComponent(txtQuantite))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPrixU, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton1))
        );
    }// </editor-fold>//GEN-END:initComponents
    
    //        // 2. ÉCRITURE DANS LE FICHIER SANS ÉCRASER 
    
    File fichier = new File("stock.csv");
    
    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
        // Le fichier de travail
        File dataFile = new File("stock.csv");
        //Obtention des valeurs a partir des entrees utilisateurs
        productName = txtProduitName.getText().trim();
        productQuantity =txtQuantite.getText().trim();
        productPrice= txtPrixU.getText().trim();
        //  Prevention contre les champs vides
        if(productName.isEmpty() || productQuantity.isEmpty() || productPrice.isEmpty()){
            JOptionPane.showMessageDialog(this,
            "Tous les champs doivent être remplis !",
            "Erreur",
            JOptionPane.ERROR_MESSAGE);
            return;
        }
        // Prevetion contre peu de caractere
        if(productName.length() <=2){
            JOptionPane.showMessageDialog(this, 
                "Le nom du produit doit avoir au moins 4 caractere",
                "Erreur",
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Conversion du texte en chiffre et prevention contre les erreurs
        String el = "la quantite";
        productQuantityInt = verifyIsInt(productQuantity, el);
        el = "le prix";
        productPriceInt = verifyIsInt(productPrice, el);
        if(productQuantityInt <= 0 || productPriceInt <= 0){
            JOptionPane.showMessageDialog(this,
            "Tu dois ecrire des chiffres positifs pas autre chose",
            "Erreur",
            JOptionPane.ERROR_MESSAGE);
            return; // Ne pas continuer si l'utilisateur a entré une mauvaise valeur
        }
        
        
        // Creation de L'ID
        char firstChar = productName.charAt(0);
        char lastChar = productName.charAt(productName.length() - 1);
        
        productID =String.valueOf(firstChar)+ productName.length() + String.valueOf(lastChar);
        productID = productID.toUpperCase();
        // Calcul du prix total du marchandise en question
        totalPrice = productQuantityInt * productPriceInt;
        
        // Demande de confirmation a l'utilisateurn
        // Demande de confirmation
        int confirmation = JOptionPane.showConfirmDialog(this,
            "Voulez-vous ajouter ce produit "+productName+" ?",
            "Confirmation",
            JOptionPane.YES_NO_OPTION);

        if (confirmation != JOptionPane.YES_OPTION) {
            txtProduitName.setText("");
            txtQuantite.setText("");
            txtPrixU.setText("");
            return; 
            // L'utilisateur a cliqué sur "Non" alors on annule
        }
        
        // Creation du fichier s'il n'existe pas
        if (!dataFile.exists()) {
            try {
            // Création du fichier et éventuellement de l'en-tête CSV
            if (dataFile.createNewFile()) {
                try (BufferedWriter bw = new BufferedWriter(new FileWriter(dataFile, true))) {
                    bw.write("ID,Nom,Quantité,Prix Unitaire,Prix Total\n");
                }
                JOptionPane.showMessageDialog(this,
                    "Fichier de stock créé avec succès.",
                    "Information",
                    JOptionPane.INFORMATION_MESSAGE);
            }
            } catch (IOException ex) {
            JOptionPane.showMessageDialog(this,
                "Impossible de créer le fichier stock.csv : " + ex.getMessage(),
                "Erreur",
                JOptionPane.ERROR_MESSAGE);
            return;
        }
}
        // Ecriture des données dans le fichier
        
        try (FileWriter fw = new FileWriter(dataFile, true)) {
            fw.append(productID + "," + productName + "," + productQuantityInt + "," + productPriceInt+","+totalPrice +"," +"\n");
            txtProduitName.setText("");
            txtQuantite.setText("");
            txtPrixU.setText("");
            
            JOptionPane.showMessageDialog(this,
                "Produit ajouté avec succès !",
                "Succès",
                JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this,
            "Erreur lors de l'enregistrement du produit : " + e.getMessage(),
            "Erreur",
            JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton1MouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField txtPrixU;
    private javax.swing.JTextField txtProduitName;
    private javax.swing.JTextField txtQuantite;
    // End of variables declaration//GEN-END:variables
}
